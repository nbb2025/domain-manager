// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"domain-manager/ent/predicate"
	"domain-manager/ent/providerkey"
	"domain-manager/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProviderKeyUpdate is the builder for updating ProviderKey entities.
type ProviderKeyUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderKeyMutation
}

// Where appends a list predicates to the ProviderKeyUpdate builder.
func (pku *ProviderKeyUpdate) Where(ps ...predicate.ProviderKey) *ProviderKeyUpdate {
	pku.mutation.Where(ps...)
	return pku
}

// SetName sets the "name" field.
func (pku *ProviderKeyUpdate) SetName(s string) *ProviderKeyUpdate {
	pku.mutation.SetName(s)
	return pku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableName(s *string) *ProviderKeyUpdate {
	if s != nil {
		pku.SetName(*s)
	}
	return pku
}

// SetProvider sets the "provider" field.
func (pku *ProviderKeyUpdate) SetProvider(s string) *ProviderKeyUpdate {
	pku.mutation.SetProvider(s)
	return pku
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableProvider(s *string) *ProviderKeyUpdate {
	if s != nil {
		pku.SetProvider(*s)
	}
	return pku
}

// SetAccessKey sets the "access_key" field.
func (pku *ProviderKeyUpdate) SetAccessKey(s string) *ProviderKeyUpdate {
	pku.mutation.SetAccessKey(s)
	return pku
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableAccessKey(s *string) *ProviderKeyUpdate {
	if s != nil {
		pku.SetAccessKey(*s)
	}
	return pku
}

// SetSecretKey sets the "secret_key" field.
func (pku *ProviderKeyUpdate) SetSecretKey(s string) *ProviderKeyUpdate {
	pku.mutation.SetSecretKey(s)
	return pku
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableSecretKey(s *string) *ProviderKeyUpdate {
	if s != nil {
		pku.SetSecretKey(*s)
	}
	return pku
}

// SetCreatedAt sets the "created_at" field.
func (pku *ProviderKeyUpdate) SetCreatedAt(t time.Time) *ProviderKeyUpdate {
	pku.mutation.SetCreatedAt(t)
	return pku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableCreatedAt(t *time.Time) *ProviderKeyUpdate {
	if t != nil {
		pku.SetCreatedAt(*t)
	}
	return pku
}

// SetUpdatedAt sets the "updated_at" field.
func (pku *ProviderKeyUpdate) SetUpdatedAt(t time.Time) *ProviderKeyUpdate {
	pku.mutation.SetUpdatedAt(t)
	return pku
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableUpdatedAt(t *time.Time) *ProviderKeyUpdate {
	if t != nil {
		pku.SetUpdatedAt(*t)
	}
	return pku
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pku *ProviderKeyUpdate) SetUserID(id int) *ProviderKeyUpdate {
	pku.mutation.SetUserID(id)
	return pku
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pku *ProviderKeyUpdate) SetNillableUserID(id *int) *ProviderKeyUpdate {
	if id != nil {
		pku = pku.SetUserID(*id)
	}
	return pku
}

// SetUser sets the "user" edge to the User entity.
func (pku *ProviderKeyUpdate) SetUser(u *User) *ProviderKeyUpdate {
	return pku.SetUserID(u.ID)
}

// Mutation returns the ProviderKeyMutation object of the builder.
func (pku *ProviderKeyUpdate) Mutation() *ProviderKeyMutation {
	return pku.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pku *ProviderKeyUpdate) ClearUser() *ProviderKeyUpdate {
	pku.mutation.ClearUser()
	return pku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pku *ProviderKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pku.sqlSave, pku.mutation, pku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pku *ProviderKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := pku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pku *ProviderKeyUpdate) Exec(ctx context.Context) error {
	_, err := pku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pku *ProviderKeyUpdate) ExecX(ctx context.Context) {
	if err := pku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pku *ProviderKeyUpdate) check() error {
	if v, ok := pku.mutation.Name(); ok {
		if err := providerkey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.name": %w`, err)}
		}
	}
	if v, ok := pku.mutation.Provider(); ok {
		if err := providerkey.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.provider": %w`, err)}
		}
	}
	if v, ok := pku.mutation.AccessKey(); ok {
		if err := providerkey.AccessKeyValidator(v); err != nil {
			return &ValidationError{Name: "access_key", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.access_key": %w`, err)}
		}
	}
	return nil
}

func (pku *ProviderKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerkey.Table, providerkey.Columns, sqlgraph.NewFieldSpec(providerkey.FieldID, field.TypeInt))
	if ps := pku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pku.mutation.Name(); ok {
		_spec.SetField(providerkey.FieldName, field.TypeString, value)
	}
	if value, ok := pku.mutation.Provider(); ok {
		_spec.SetField(providerkey.FieldProvider, field.TypeString, value)
	}
	if value, ok := pku.mutation.AccessKey(); ok {
		_spec.SetField(providerkey.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := pku.mutation.SecretKey(); ok {
		_spec.SetField(providerkey.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := pku.mutation.CreatedAt(); ok {
		_spec.SetField(providerkey.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pku.mutation.UpdatedAt(); ok {
		_spec.SetField(providerkey.FieldUpdatedAt, field.TypeTime, value)
	}
	if pku.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerkey.UserTable,
			Columns: []string{providerkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pku.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerkey.UserTable,
			Columns: []string{providerkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pku.mutation.done = true
	return n, nil
}

// ProviderKeyUpdateOne is the builder for updating a single ProviderKey entity.
type ProviderKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderKeyMutation
}

// SetName sets the "name" field.
func (pkuo *ProviderKeyUpdateOne) SetName(s string) *ProviderKeyUpdateOne {
	pkuo.mutation.SetName(s)
	return pkuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableName(s *string) *ProviderKeyUpdateOne {
	if s != nil {
		pkuo.SetName(*s)
	}
	return pkuo
}

// SetProvider sets the "provider" field.
func (pkuo *ProviderKeyUpdateOne) SetProvider(s string) *ProviderKeyUpdateOne {
	pkuo.mutation.SetProvider(s)
	return pkuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableProvider(s *string) *ProviderKeyUpdateOne {
	if s != nil {
		pkuo.SetProvider(*s)
	}
	return pkuo
}

// SetAccessKey sets the "access_key" field.
func (pkuo *ProviderKeyUpdateOne) SetAccessKey(s string) *ProviderKeyUpdateOne {
	pkuo.mutation.SetAccessKey(s)
	return pkuo
}

// SetNillableAccessKey sets the "access_key" field if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableAccessKey(s *string) *ProviderKeyUpdateOne {
	if s != nil {
		pkuo.SetAccessKey(*s)
	}
	return pkuo
}

// SetSecretKey sets the "secret_key" field.
func (pkuo *ProviderKeyUpdateOne) SetSecretKey(s string) *ProviderKeyUpdateOne {
	pkuo.mutation.SetSecretKey(s)
	return pkuo
}

// SetNillableSecretKey sets the "secret_key" field if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableSecretKey(s *string) *ProviderKeyUpdateOne {
	if s != nil {
		pkuo.SetSecretKey(*s)
	}
	return pkuo
}

// SetCreatedAt sets the "created_at" field.
func (pkuo *ProviderKeyUpdateOne) SetCreatedAt(t time.Time) *ProviderKeyUpdateOne {
	pkuo.mutation.SetCreatedAt(t)
	return pkuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableCreatedAt(t *time.Time) *ProviderKeyUpdateOne {
	if t != nil {
		pkuo.SetCreatedAt(*t)
	}
	return pkuo
}

// SetUpdatedAt sets the "updated_at" field.
func (pkuo *ProviderKeyUpdateOne) SetUpdatedAt(t time.Time) *ProviderKeyUpdateOne {
	pkuo.mutation.SetUpdatedAt(t)
	return pkuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProviderKeyUpdateOne {
	if t != nil {
		pkuo.SetUpdatedAt(*t)
	}
	return pkuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pkuo *ProviderKeyUpdateOne) SetUserID(id int) *ProviderKeyUpdateOne {
	pkuo.mutation.SetUserID(id)
	return pkuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pkuo *ProviderKeyUpdateOne) SetNillableUserID(id *int) *ProviderKeyUpdateOne {
	if id != nil {
		pkuo = pkuo.SetUserID(*id)
	}
	return pkuo
}

// SetUser sets the "user" edge to the User entity.
func (pkuo *ProviderKeyUpdateOne) SetUser(u *User) *ProviderKeyUpdateOne {
	return pkuo.SetUserID(u.ID)
}

// Mutation returns the ProviderKeyMutation object of the builder.
func (pkuo *ProviderKeyUpdateOne) Mutation() *ProviderKeyMutation {
	return pkuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pkuo *ProviderKeyUpdateOne) ClearUser() *ProviderKeyUpdateOne {
	pkuo.mutation.ClearUser()
	return pkuo
}

// Where appends a list predicates to the ProviderKeyUpdate builder.
func (pkuo *ProviderKeyUpdateOne) Where(ps ...predicate.ProviderKey) *ProviderKeyUpdateOne {
	pkuo.mutation.Where(ps...)
	return pkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pkuo *ProviderKeyUpdateOne) Select(field string, fields ...string) *ProviderKeyUpdateOne {
	pkuo.fields = append([]string{field}, fields...)
	return pkuo
}

// Save executes the query and returns the updated ProviderKey entity.
func (pkuo *ProviderKeyUpdateOne) Save(ctx context.Context) (*ProviderKey, error) {
	return withHooks(ctx, pkuo.sqlSave, pkuo.mutation, pkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pkuo *ProviderKeyUpdateOne) SaveX(ctx context.Context) *ProviderKey {
	node, err := pkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pkuo *ProviderKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := pkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkuo *ProviderKeyUpdateOne) ExecX(ctx context.Context) {
	if err := pkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pkuo *ProviderKeyUpdateOne) check() error {
	if v, ok := pkuo.mutation.Name(); ok {
		if err := providerkey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.name": %w`, err)}
		}
	}
	if v, ok := pkuo.mutation.Provider(); ok {
		if err := providerkey.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.provider": %w`, err)}
		}
	}
	if v, ok := pkuo.mutation.AccessKey(); ok {
		if err := providerkey.AccessKeyValidator(v); err != nil {
			return &ValidationError{Name: "access_key", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.access_key": %w`, err)}
		}
	}
	return nil
}

func (pkuo *ProviderKeyUpdateOne) sqlSave(ctx context.Context) (_node *ProviderKey, err error) {
	if err := pkuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerkey.Table, providerkey.Columns, sqlgraph.NewFieldSpec(providerkey.FieldID, field.TypeInt))
	id, ok := pkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerkey.FieldID)
		for _, f := range fields {
			if !providerkey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerkey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pkuo.mutation.Name(); ok {
		_spec.SetField(providerkey.FieldName, field.TypeString, value)
	}
	if value, ok := pkuo.mutation.Provider(); ok {
		_spec.SetField(providerkey.FieldProvider, field.TypeString, value)
	}
	if value, ok := pkuo.mutation.AccessKey(); ok {
		_spec.SetField(providerkey.FieldAccessKey, field.TypeString, value)
	}
	if value, ok := pkuo.mutation.SecretKey(); ok {
		_spec.SetField(providerkey.FieldSecretKey, field.TypeString, value)
	}
	if value, ok := pkuo.mutation.CreatedAt(); ok {
		_spec.SetField(providerkey.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pkuo.mutation.UpdatedAt(); ok {
		_spec.SetField(providerkey.FieldUpdatedAt, field.TypeTime, value)
	}
	if pkuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerkey.UserTable,
			Columns: []string{providerkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pkuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerkey.UserTable,
			Columns: []string{providerkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProviderKey{config: pkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerkey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pkuo.mutation.done = true
	return _node, nil
}
