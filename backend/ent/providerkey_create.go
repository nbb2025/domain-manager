// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"domain-manager/ent/providerkey"
	"domain-manager/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProviderKeyCreate is the builder for creating a ProviderKey entity.
type ProviderKeyCreate struct {
	config
	mutation *ProviderKeyMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pkc *ProviderKeyCreate) SetName(s string) *ProviderKeyCreate {
	pkc.mutation.SetName(s)
	return pkc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pkc *ProviderKeyCreate) SetNillableName(s *string) *ProviderKeyCreate {
	if s != nil {
		pkc.SetName(*s)
	}
	return pkc
}

// SetProvider sets the "provider" field.
func (pkc *ProviderKeyCreate) SetProvider(s string) *ProviderKeyCreate {
	pkc.mutation.SetProvider(s)
	return pkc
}

// SetAccessKey sets the "access_key" field.
func (pkc *ProviderKeyCreate) SetAccessKey(s string) *ProviderKeyCreate {
	pkc.mutation.SetAccessKey(s)
	return pkc
}

// SetSecretKey sets the "secret_key" field.
func (pkc *ProviderKeyCreate) SetSecretKey(s string) *ProviderKeyCreate {
	pkc.mutation.SetSecretKey(s)
	return pkc
}

// SetCreatedAt sets the "created_at" field.
func (pkc *ProviderKeyCreate) SetCreatedAt(t time.Time) *ProviderKeyCreate {
	pkc.mutation.SetCreatedAt(t)
	return pkc
}

// SetUpdatedAt sets the "updated_at" field.
func (pkc *ProviderKeyCreate) SetUpdatedAt(t time.Time) *ProviderKeyCreate {
	pkc.mutation.SetUpdatedAt(t)
	return pkc
}

// SetID sets the "id" field.
func (pkc *ProviderKeyCreate) SetID(i int) *ProviderKeyCreate {
	pkc.mutation.SetID(i)
	return pkc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pkc *ProviderKeyCreate) SetUserID(id int) *ProviderKeyCreate {
	pkc.mutation.SetUserID(id)
	return pkc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pkc *ProviderKeyCreate) SetNillableUserID(id *int) *ProviderKeyCreate {
	if id != nil {
		pkc = pkc.SetUserID(*id)
	}
	return pkc
}

// SetUser sets the "user" edge to the User entity.
func (pkc *ProviderKeyCreate) SetUser(u *User) *ProviderKeyCreate {
	return pkc.SetUserID(u.ID)
}

// Mutation returns the ProviderKeyMutation object of the builder.
func (pkc *ProviderKeyCreate) Mutation() *ProviderKeyMutation {
	return pkc.mutation
}

// Save creates the ProviderKey in the database.
func (pkc *ProviderKeyCreate) Save(ctx context.Context) (*ProviderKey, error) {
	pkc.defaults()
	return withHooks(ctx, pkc.sqlSave, pkc.mutation, pkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pkc *ProviderKeyCreate) SaveX(ctx context.Context) *ProviderKey {
	v, err := pkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkc *ProviderKeyCreate) Exec(ctx context.Context) error {
	_, err := pkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkc *ProviderKeyCreate) ExecX(ctx context.Context) {
	if err := pkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pkc *ProviderKeyCreate) defaults() {
	if _, ok := pkc.mutation.Name(); !ok {
		v := providerkey.DefaultName
		pkc.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pkc *ProviderKeyCreate) check() error {
	if _, ok := pkc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ProviderKey.name"`)}
	}
	if v, ok := pkc.mutation.Name(); ok {
		if err := providerkey.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.name": %w`, err)}
		}
	}
	if _, ok := pkc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "ProviderKey.provider"`)}
	}
	if v, ok := pkc.mutation.Provider(); ok {
		if err := providerkey.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.provider": %w`, err)}
		}
	}
	if _, ok := pkc.mutation.AccessKey(); !ok {
		return &ValidationError{Name: "access_key", err: errors.New(`ent: missing required field "ProviderKey.access_key"`)}
	}
	if v, ok := pkc.mutation.AccessKey(); ok {
		if err := providerkey.AccessKeyValidator(v); err != nil {
			return &ValidationError{Name: "access_key", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.access_key": %w`, err)}
		}
	}
	if _, ok := pkc.mutation.SecretKey(); !ok {
		return &ValidationError{Name: "secret_key", err: errors.New(`ent: missing required field "ProviderKey.secret_key"`)}
	}
	if _, ok := pkc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProviderKey.created_at"`)}
	}
	if _, ok := pkc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProviderKey.updated_at"`)}
	}
	if v, ok := pkc.mutation.ID(); ok {
		if err := providerkey.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProviderKey.id": %w`, err)}
		}
	}
	return nil
}

func (pkc *ProviderKeyCreate) sqlSave(ctx context.Context) (*ProviderKey, error) {
	if err := pkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pkc.mutation.id = &_node.ID
	pkc.mutation.done = true
	return _node, nil
}

func (pkc *ProviderKeyCreate) createSpec() (*ProviderKey, *sqlgraph.CreateSpec) {
	var (
		_node = &ProviderKey{config: pkc.config}
		_spec = sqlgraph.NewCreateSpec(providerkey.Table, sqlgraph.NewFieldSpec(providerkey.FieldID, field.TypeInt))
	)
	if id, ok := pkc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pkc.mutation.Name(); ok {
		_spec.SetField(providerkey.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pkc.mutation.Provider(); ok {
		_spec.SetField(providerkey.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := pkc.mutation.AccessKey(); ok {
		_spec.SetField(providerkey.FieldAccessKey, field.TypeString, value)
		_node.AccessKey = value
	}
	if value, ok := pkc.mutation.SecretKey(); ok {
		_spec.SetField(providerkey.FieldSecretKey, field.TypeString, value)
		_node.SecretKey = value
	}
	if value, ok := pkc.mutation.CreatedAt(); ok {
		_spec.SetField(providerkey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pkc.mutation.UpdatedAt(); ok {
		_spec.SetField(providerkey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := pkc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   providerkey.UserTable,
			Columns: []string{providerkey.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_provider_keys = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProviderKeyCreateBulk is the builder for creating many ProviderKey entities in bulk.
type ProviderKeyCreateBulk struct {
	config
	err      error
	builders []*ProviderKeyCreate
}

// Save creates the ProviderKey entities in the database.
func (pkcb *ProviderKeyCreateBulk) Save(ctx context.Context) ([]*ProviderKey, error) {
	if pkcb.err != nil {
		return nil, pkcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pkcb.builders))
	nodes := make([]*ProviderKey, len(pkcb.builders))
	mutators := make([]Mutator, len(pkcb.builders))
	for i := range pkcb.builders {
		func(i int, root context.Context) {
			builder := pkcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProviderKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pkcb *ProviderKeyCreateBulk) SaveX(ctx context.Context) []*ProviderKey {
	v, err := pkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkcb *ProviderKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := pkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkcb *ProviderKeyCreateBulk) ExecX(ctx context.Context) {
	if err := pkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
